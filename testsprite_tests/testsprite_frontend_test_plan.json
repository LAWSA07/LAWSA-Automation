[
  {
    "id": "TC001",
    "title": "User Login Success",
    "description": "Verify that a user can successfully log in with valid credentials and receive a valid JWT token.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page"
      },
      {
        "type": "action",
        "description": "Enter valid username and password"
      },
      {
        "type": "action",
        "description": "Submit the login form"
      },
      {
        "type": "assertion",
        "description": "Verify that the login is successful and a JWT token is returned"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "User Login Failure with Invalid Credentials",
    "description": "Verify that login fails with invalid username or password and the user receives an appropriate error message.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page"
      },
      {
        "type": "action",
        "description": "Enter invalid username or password"
      },
      {
        "type": "action",
        "description": "Submit the login form"
      },
      {
        "type": "assertion",
        "description": "Verify that login is rejected and error message is displayed"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Visual Workflow Editor Node Creation and Connection",
    "description": "Verify that users can create nodes of all supported types in the visual editor and connect them correctly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in and open the visual workflow editor"
      },
      {
        "type": "action",
        "description": "Drag and drop nodes including trigger, LLM, tool, memory, and agent nodes onto the canvas"
      },
      {
        "type": "action",
        "description": "Create connections between nodes representing data flow"
      },
      {
        "type": "assertion",
        "description": "Verify that all node types can be created and connected successfully without errors"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Node Parameter Configuration and Credential Input",
    "description": "Verify that users can configure node parameters including sensitive credentials with encryption and validation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Select nodes on the workflow editor"
      },
      {
        "type": "action",
        "description": "Enter various configuration parameters for nodes, including credential information"
      },
      {
        "type": "assertion",
        "description": "Verify that credentials are encrypted and validated before saving"
      },
      {
        "type": "assertion",
        "description": "Verify configuration parameters are saved and retrievable correctly"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Save and Persist Workflow",
    "description": "Validate that users can save their configured workflows and later retrieve them accurately.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Configure a workflow with connected nodes and parameters"
      },
      {
        "type": "action",
        "description": "Save the workflow"
      },
      {
        "type": "action",
        "description": "Reload or re-open the workflow editor"
      },
      {
        "type": "assertion",
        "description": "Verify that the saved workflow loads correctly with all nodes, connections, and parameters intact"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Initiate Workflow Execution and Real-time Streaming",
    "description": "Verify that on workflow execution initiation, the backend builds agents dynamically and streams real-time execution results to the UI.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Start a saved workflow execution from the frontend"
      },
      {
        "type": "assertion",
        "description": "Verify backend dynamically builds LangGraph/LangChain agents based on workflow"
      },
      {
        "type": "assertion",
        "description": "Verify real-time execution results are streamed via server-sent events to frontend UI"
      },
      {
        "type": "assertion",
        "description": "Verify streamed data updates UI accurately and timely"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Error Handling During Workflow Execution",
    "description": "Validate that errors during agent execution such as invalid input or external API failure are handled gracefully with error messages streamed to the frontend.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Initiate execution of workflow that triggers errors (e.g. wrong tool parameters or invalid credentials)"
      },
      {
        "type": "assertion",
        "description": "Verify error details are captured and streamed to frontend UI"
      },
      {
        "type": "assertion",
        "description": "Verify frontend displays error feedback clearly and allows user to debug"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Credential Management: Add, Update, and Encrypt Credentials",
    "description": "Validate that admin users can add, update, delete, and list credentials with encryption and secure storage.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as admin and open credential management interface"
      },
      {
        "type": "action",
        "description": "Add new credentials for LLM or tools with sensitive data"
      },
      {
        "type": "assertion",
        "description": "Verify credentials are encrypted before being stored in the backend"
      },
      {
        "type": "action",
        "description": "Update and delete existing credentials"
      },
      {
        "type": "assertion",
        "description": "Verify updates and deletions reflect correctly without exposing sensitive data"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Multi-Provider LLM Node Integration",
    "description": "Verify that LLM nodes can be configured and executed correctly using various providers (OpenAI, Groq, Anthropic, Together).",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Configure LLM node with provider A and valid credentials"
      },
      {
        "type": "assertion",
        "description": "Verify LLM calls succeed and return expected output"
      },
      {
        "type": "action",
        "description": "Repeat for providers B, C, and D"
      },
      {
        "type": "assertion",
        "description": "Verify all providers integrate and execute workflows correctly"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Tool Integration: Send Email via SMTP",
    "description": "Verify that the email tool node sends emails correctly using configured SMTP settings.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure an email tool node with valid SMTP credentials and parameters"
      },
      {
        "type": "action",
        "description": "Execute workflow that triggers email sending"
      },
      {
        "type": "assertion",
        "description": "Verify email is sent successfully to intended recipients"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Tool Integration: Post to Slack",
    "description": "Verify that the Slack tool node posts messages correctly to a Slack channel.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure Slack tool node with dummy or valid API credentials"
      },
      {
        "type": "action",
        "description": "Execute a workflow that sends a message to Slack"
      },
      {
        "type": "assertion",
        "description": "Verify message appears in the configured Slack channel or dummy response confirms posting"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Tool Integration: Web Search via Tavily API",
    "description": "Validate the web search tool node performs searches and returns relevant results.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure web search tool node with required parameters"
      },
      {
        "type": "action",
        "description": "Execute workflow that triggers a Tavily web search"
      },
      {
        "type": "assertion",
        "description": "Verify search results are returned and populated in output nodes correctly"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Tool Integration: Math Operation Multiply",
    "description": "Verify that math tool node correctly multiplies two numbers and returns accurate results.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure multiply tool node with test numeric inputs"
      },
      {
        "type": "action",
        "description": "Execute workflow containing the multiply node"
      },
      {
        "type": "assertion",
        "description": "Verify output equals the correct product of input numbers"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Authentication and Authorization Enforcement",
    "description": "Verify that all sensitive API endpoints require valid JWT tokens and enforce role-based access control.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access protected endpoint without authentication"
      },
      {
        "type": "assertion",
        "description": "Verify access is denied with proper error code"
      },
      {
        "type": "action",
        "description": "Access protected endpoints with valid JWT for regular user"
      },
      {
        "type": "assertion",
        "description": "Verify permitted actions correspond to user roles"
      },
      {
        "type": "action",
        "description": "Access admin-only endpoints with regular user JWT"
      },
      {
        "type": "assertion",
        "description": "Verify access is denied"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Secure Credential Storage and No Exposure in Code Repository",
    "description": "Ensure credentials and secrets are stored encrypted and are not exposed in git repository or commit history.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Review credential storage backend for encryption"
      },
      {
        "type": "assertion",
        "description": "Verify all credentials are encrypted at rest and cannot be retrieved in plain text"
      },
      {
        "type": "action",
        "description": "Scan git repository history and files for secrets or credentials"
      },
      {
        "type": "assertion",
        "description": "Verify no secrets or sensitive data are found in codebase or git history"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Dynamic MongoDB Connection Handling",
    "description": "Verify that the backend supports dynamic, runtime-configurable MongoDB connections for optional memory persistence.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure backend to connect to different MongoDB instances dynamically"
      },
      {
        "type": "assertion",
        "description": "Verify connection to configured database succeeds without restarting backend"
      },
      {
        "type": "action",
        "description": "Execute workflows that use memory nodes backed by MongoDB"
      },
      {
        "type": "assertion",
        "description": "Verify memory persistence and retrieval operate correctly with the dynamic database"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "CORS Policy Enforcement",
    "description": "Validate that the backend correctly enforces CORS policies allowing requests only from allowed origins.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Make API requests from allowed origin"
      },
      {
        "type": "assertion",
        "description": "Verify requests succeed with appropriate CORS headers"
      },
      {
        "type": "action",
        "description": "Make API requests from disallowed origin"
      },
      {
        "type": "assertion",
        "description": "Verify requests are blocked due to CORS policy"
      }
    ]
  },
  {
    "id": "TC018",
    "title": "Admin User Management Interface",
    "description": "Verify that administrators can manage user accounts including creating, updating, deleting, and assigning roles.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Log in as admin and navigate to user management interface"
      },
      {
        "type": "action",
        "description": "Create a new user with specific roles"
      },
      {
        "type": "assertion",
        "description": "Verify new user is created and roles assigned"
      },
      {
        "type": "action",
        "description": "Update user information and roles"
      },
      {
        "type": "assertion",
        "description": "Verify updates are saved and applied"
      },
      {
        "type": "action",
        "description": "Delete a user"
      },
      {
        "type": "assertion",
        "description": "Verify user is removed and can no longer authenticate"
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Real-time Execution Output Accuracy and Latency",
    "description": "Verify that streamed execution outputs are accurate, complete, and delivered with minimal latency under normal and high load conditions.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Execute a complex workflow that produces numerous output events"
      },
      {
        "type": "assertion",
        "description": "Verify output events streamed in order, accurately reflecting execution progress"
      },
      {
        "type": "action",
        "description": "Simulate high load by concurrent executions"
      },
      {
        "type": "assertion",
        "description": "Verify streamed outputs maintain minimal latency and no data loss occurs"
      }
    ]
  },
  {
    "id": "TC020",
    "title": "Workflow Debug and Validation Feedback",
    "description": "Ensure users receive actionable validation errors and debugging feedback when configuring or executing workflows with issues.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Configure workflow with invalid connections or missing parameters"
      },
      {
        "type": "assertion",
        "description": "Verify frontend shows clear validation errors before saving or executing"
      },
      {
        "type": "action",
        "description": "Execute a workflow that triggers runtime errors"
      },
      {
        "type": "assertion",
        "description": "Verify detailed error feedback is streamed and displayed, aiding debugging"
      }
    ]
  }
]
