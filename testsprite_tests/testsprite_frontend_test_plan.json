[
  {
    "id": "TC001",
    "title": "User Login Success",
    "description": "Verify that users can successfully log in with valid credentials using the JWT-based authentication system.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page."
      },
      {
        "type": "action",
        "description": "Input valid username and password."
      },
      {
        "type": "action",
        "description": "Submit the login form."
      },
      {
        "type": "assertion",
        "description": "Check that the user is authenticated and redirected to the visual workflow editor."
      },
      {
        "type": "assertion",
        "description": "Verify a JWT token is received and stored securely."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "User Login Failure with Invalid Credentials",
    "description": "Verify that login fails when using incorrect username or password and appropriate error message is displayed.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page."
      },
      {
        "type": "action",
        "description": "Input invalid username and/or password."
      },
      {
        "type": "action",
        "description": "Submit the login form."
      },
      {
        "type": "assertion",
        "description": "Verify that login is rejected."
      },
      {
        "type": "assertion",
        "description": "Check that a relevant error message is shown to the user."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Access Workflow Editor After Authentication",
    "description": "Verify that only authenticated users can access the visual workflow editor and unauthorized access is blocked.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to navigate to the workflow editor URL without authentication."
      },
      {
        "type": "assertion",
        "description": "Confirm redirection to login page or access denied."
      },
      {
        "type": "action",
        "description": "Log in with valid credentials."
      },
      {
        "type": "action",
        "description": "Navigate to the workflow editor."
      },
      {
        "type": "assertion",
        "description": "Verify access granted and workflow editor UI loads."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Visual Workflow Editor: Add, Connect, Configure Nodes",
    "description": "Verify users can add nodes representing triggers, LLMs, tools, memory, and agents; connect them; and configure properties.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open the visual workflow editor."
      },
      {
        "type": "action",
        "description": "Drag and drop various node types (trigger, LLM, tool, memory, agent) onto the canvas."
      },
      {
        "type": "action",
        "description": "Connect nodes appropriately to form a valid workflow."
      },
      {
        "type": "action",
        "description": "Configure node properties including credentials, tool parameters, and memory settings."
      },
      {
        "type": "assertion",
        "description": "Confirm nodes are added, connections are established, and properties persist after saving."
      },
      {
        "type": "assertion",
        "description": "Verify validation prevents invalid connections or missing required configurations."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Workflow Save and Load",
    "description": "Ensure workflows can be saved and reloaded with all nodes and configurations intact.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Create a workflow with multiple nodes and configurations."
      },
      {
        "type": "action",
        "description": "Save the workflow."
      },
      {
        "type": "action",
        "description": "Close and reopen the workflow editor."
      },
      {
        "type": "action",
        "description": "Load the saved workflow."
      },
      {
        "type": "assertion",
        "description": "Verify all nodes, connections, and configurations are restored correctly."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Backend Agent Generation From Workflow",
    "description": "Verify backend dynamically generates LangGraph/LangChain agents from frontend workflow definitions.",
    "category": "integration",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Submit a workflow with multiple connected nodes to backend execution API."
      },
      {
        "type": "assertion",
        "description": "Confirm backend generates a valid agentic system reflecting workflow logic."
      },
      {
        "type": "assertion",
        "description": "Verify agentic system uses correct LLMs, tools, and parameters as configured."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Credential Management: Add, Encrypt, Validate Credentials",
    "description": "Verify users can add credentials for supported LLMs and tools; credentials are securely encrypted and validated.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the credential management UI."
      },
      {
        "type": "action",
        "description": "Add new credentials for an LLM provider (e.g., OpenAI)."
      },
      {
        "type": "action",
        "description": "Confirm credentials are stored in backend with Fernet encryption."
      },
      {
        "type": "action",
        "description": "Attempt to use these credentials in a workflow node."
      },
      {
        "type": "assertion",
        "description": "Verify credentials are validated before execution and accepted if valid."
      },
      {
        "type": "action",
        "description": "Add credentials with invalid or expired tokens."
      },
      {
        "type": "assertion",
        "description": "Confirm validation fails and user is notified."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Execution of Agentic Workflow with Live Streaming Output",
    "description": "Verify that executing a workflow triggers backend agent execution and streams live results to frontend in real time.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Execute a saved workflow through the frontend UI."
      },
      {
        "type": "assertion",
        "description": "Check that the backend streams incremental agent output to the frontend using Server-Sent Events."
      },
      {
        "type": "assertion",
        "description": "Confirm the UI displays live partial results progressively."
      },
      {
        "type": "assertion",
        "description": "Validate that execution completes successfully and all expected outputs are shown."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Streaming Execution Error Handling",
    "description": "Verify the system properly handles backend execution errors during streaming and surfaces meaningful feedback in the frontend.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Execute a workflow designed to cause an agentic error (e.g., invalid credentials, misconfigured node)."
      },
      {
        "type": "assertion",
        "description": "Confirm backend streams error details to the frontend interface."
      },
      {
        "type": "assertion",
        "description": "Verify the frontend shows a clear error message and does not hang."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Tool Integration: Send Email and Post to Slack",
    "description": "Verify email and Slack tool nodes can be configured and triggered to perform sending messages correctly.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Add and configure a send_email tool node with valid SMTP credentials and message data."
      },
      {
        "type": "action",
        "description": "Add and configure a post_to_slack tool node with valid Slack parameters."
      },
      {
        "type": "action",
        "description": "Connect both tool nodes properly within a workflow."
      },
      {
        "type": "action",
        "description": "Execute the workflow."
      },
      {
        "type": "assertion",
        "description": "Verify email is sent successfully without errors."
      },
      {
        "type": "assertion",
        "description": "Verify Slack post occurs as expected."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Tool Integration: Tavily Web Search and Math Multiply",
    "description": "Verify the web search and math multiply tool nodes operate as expected within workflows.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Add tavily_search node configured for a web query."
      },
      {
        "type": "action",
        "description": "Add multiply math tool node configured with input numbers."
      },
      {
        "type": "action",
        "description": "Connect and configure nodes in workflow."
      },
      {
        "type": "action",
        "description": "Execute the workflow."
      },
      {
        "type": "assertion",
        "description": "Verify web search results are received and incorporated in output."
      },
      {
        "type": "assertion",
        "description": "Verify the multiply node outputs the correct calculated result."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Validation Prevents Invalid Workflow Configurations",
    "description": "Verify frontend and backend validation detects invalid or incomplete workflows, such as unconnected nodes or missing credentials.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to save a workflow with missing required node connections."
      },
      {
        "type": "assertion",
        "description": "Verify validation error prevents save and informs the user."
      },
      {
        "type": "action",
        "description": "Configure a tool node without required valid credentials."
      },
      {
        "type": "assertion",
        "description": "Confirm validation error is displayed and execution is blocked."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Security: Verify No Secret Leakage in Repositories",
    "description": "Ensure that no secret keys or sensitive information appear in the code repository history or runtime environment variables exposed.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Perform grep/search on codebase and git history for credentials or secret keys."
      },
      {
        "type": "assertion",
        "description": "Confirm no secrets or keys are present in code or commit history."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Production Security Features: Verify CORS and Rate Limiting",
    "description": "Verify that the backend enforces CORS policies and rate limiting to protect the API endpoints in production environment.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send API requests with allowed and disallowed origins."
      },
      {
        "type": "assertion",
        "description": "Confirm requests from disallowed origins are blocked by CORS."
      },
      {
        "type": "action",
        "description": "Send API requests exceeding rate limits within a short timeframe."
      },
      {
        "type": "assertion",
        "description": "Verify rate limiting responses (429) are triggered appropriately."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "MongoDB Dynamic Runtime Configuration",
    "description": "Verify that MongoDB connections can be dynamically configured at runtime and workflows can leverage optional memory backend successfully.",
    "category": "integration",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Configure MongoDB connection parameters dynamically in the system."
      },
      {
        "type": "action",
        "description": "Add memory nodes in workflow leveraging MongoDB backend."
      },
      {
        "type": "action",
        "description": "Execute workflow that reads/writes memory."
      },
      {
        "type": "assertion",
        "description": "Confirm MongoDB connection is successfully established and used."
      },
      {
        "type": "assertion",
        "description": "Verify memory operations complete as expected within agentic workflows."
      }
    ]
  }
]
