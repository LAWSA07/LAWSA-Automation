[
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "302c720a-3b08-4fb6-9e14-f3708640e384",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC001-post execute agent streams results",
    "description": "Test the /execute-agent POST endpoint to verify it correctly streams agentic workflow execution results as Server-Sent Events in real-time based on the provided workflow definition.",
    "code": "import requests\nimport json\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Example JWT token for authentication; replace with a valid token if needed\nJWT_TOKEN = \"your_jwt_token_here\"\n\ndef test_post_execute_agent_streams_results():\n    url = f\"{BASE_URL}/execute-agent\"\n    headers = {\n        \"Authorization\": f\"Bearer {JWT_TOKEN}\",\n        \"Accept\": \"text/event-stream\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Example minimal workflow definition for testing\n    workflow_definition = {\n        \"nodes\": [\n            {\n                \"id\": \"node1\",\n                \"type\": \"input\",\n                \"parameters\": {\"input\": \"Test input\"}\n            },\n            {\n                \"id\": \"node2\",\n                \"type\": \"agent\",\n                \"parameters\": {\"agent_type\": \"test-agent\"}\n            }\n        ],\n        \"connections\": [\n            {\"source\": \"node1\", \"target\": \"node2\"}\n        ]\n    }\n\n    payload = {\n        \"workflow_definition\": workflow_definition\n    }\n\n    try:\n        with requests.post(url, headers=headers, json=payload, stream=True, timeout=TIMEOUT) as response:\n            assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n            assert response.headers.get(\"Content-Type\", \"\").startswith(\"text/event-stream\"), \\\n                f\"Expected Content-Type to start with 'text/event-stream', got {response.headers.get('Content-Type')}\"\n\n            # Read streamed Server-Sent Events (SSE)\n            event_data_received = False\n            for line in response.iter_lines(decode_unicode=True):\n                if line:\n                    # SSE lines start with \"data: \"\n                    if line.startswith(\"data:\"):\n                        event_data_received = True\n                        data_str = line[len(\"data:\"):].strip()\n                        # Try to parse JSON data if possible\n                        try:\n                            data_json = json.loads(data_str)\n                            # Basic validation: data_json should be a dict or list\n                            assert isinstance(data_json, (dict, list)), \"Streamed data is not a JSON object or array\"\n                        except json.JSONDecodeError:\n                            # If not JSON, just ensure non-empty string\n                            assert len(data_str) > 0, \"Streamed data is empty\"\n                        # For this test, receiving at least one data event is sufficient\n                        break\n\n            assert event_data_received, \"No Server-Sent Event data received in stream\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_post_execute_agent_streams_results()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 71, in <module>\n  File \"<string>\", line 43, in test_post_execute_agent_streams_results\nAssertionError: Expected status code 200, got 422\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.359Z",
    "modified": "2025-07-24T20:31:24.961Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "9a616415-eee1-4213-b58e-2964470adc83",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC002-get credentials retrieves encrypted list",
    "description": "Test the /api/credentials GET endpoint to ensure it returns a list of encrypted credentials for the authenticated user.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/api/users/login\"\nCREDENTIALS_ENDPOINT = f\"{BASE_URL}/api/credentials\"\nTIMEOUT = 30\n\n# Replace these with valid test user credentials\nTEST_USERNAME = \"testuser\"\nTEST_PASSWORD = \"testpassword\"\n\n\ndef test_get_credentials_retrieves_encrypted_list():\n    # Authenticate and get JWT token\n    login_payload = {\"username\": TEST_USERNAME, \"password\": TEST_PASSWORD}\n    try:\n        login_resp = requests.post(LOGIN_ENDPOINT, json=login_payload, timeout=TIMEOUT)\n        login_resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Login request failed: {e}\"\n\n    login_data = login_resp.json()\n    token = login_data.get(\"token\")\n    assert token, \"JWT token not found in login response\"\n\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    # Call GET /api/credentials\n    try:\n        resp = requests.get(CREDENTIALS_ENDPOINT, headers=headers, timeout=TIMEOUT)\n        resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"GET /api/credentials request failed: {e}\"\n\n    # Validate response\n    assert resp.status_code == 200, f\"Expected status code 200, got {resp.status_code}\"\n    credentials_list = resp.json()\n    assert isinstance(credentials_list, list), \"Response is not a list\"\n\n    # Check that each credential appears encrypted (string type, non-empty)\n    for cred in credentials_list:\n        assert isinstance(cred, dict), \"Each credential should be a dict\"\n        # We expect encrypted credentials, so at least credential_value should be a non-empty string\n        # The exact schema is not fully detailed, so we check for presence of keys and types\n        assert \"credential_name\" in cred, \"Credential missing 'credential_name'\"\n        assert \"credential_value\" in cred, \"Credential missing 'credential_value'\"\n        assert isinstance(cred[\"credential_name\"], str), \"'credential_name' should be a string\"\n        assert isinstance(cred[\"credential_value\"], str), \"'credential_value' should be a string\"\n        assert len(cred[\"credential_value\"]) > 0, \"'credential_value' should not be empty\"\n\n\ntest_get_credentials_retrieves_encrypted_list()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 18, in test_get_credentials_retrieves_encrypted_list\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/users/login\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 20, in test_get_credentials_retrieves_encrypted_list\nAssertionError: Login request failed: 404 Client Error: Not Found for url: http://localhost:8000/api/users/login\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.366Z",
    "modified": "2025-07-24T20:30:38.672Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "7e29b723-f1e6-428c-994d-5e3141e15207",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC003-post credentials adds or updates with validation",
    "description": "Test the /api/credentials POST endpoint to verify it correctly adds or updates credentials with proper validation and encryption, returning success or validation error messages.",
    "code": "import requests\nimport json\nimport base64\nfrom cryptography.fernet import Fernet\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Sample user credentials for login (should be replaced with valid test user credentials)\nUSERNAME = \"testuser\"\nPASSWORD = \"testpassword\"\n\n# Fernet key for encryption (in real scenario, this should be securely obtained)\n# For testing, generate a key or use a fixed key for encryption consistency\nFERNET_KEY = Fernet.generate_key()\nfernet = Fernet(FERNET_KEY)\n\n\ndef login():\n    url = f\"{BASE_URL}/api/users/login\"\n    payload = {\"username\": USERNAME, \"password\": PASSWORD}\n    resp = requests.post(url, json=payload, timeout=TIMEOUT)\n    resp.raise_for_status()\n    token = resp.json().get(\"token\")\n    assert token, \"Login failed: No token received\"\n    return token\n\n\ndef delete_credential(credential_id, headers):\n    url = f\"{BASE_URL}/api/credentials/{credential_id}\"\n    resp = requests.delete(url, headers=headers, timeout=TIMEOUT)\n    # 204 No Content expected on successful deletion\n    assert resp.status_code == 204, f\"Failed to delete credential {credential_id}\"\n\n\ndef test_post_credentials_adds_or_updates_with_validation():\n    token = login()\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    # Prepare a credential name and value\n    credential_name = \"test_api_key\"\n    raw_credential_value = \"my-secret-api-key-123\"\n\n    # Encrypt the credential value using Fernet\n    encrypted_value_bytes = fernet.encrypt(raw_credential_value.encode())\n    encrypted_value_str = encrypted_value_bytes.decode()\n\n    payload = {\n        \"credential_name\": credential_name,\n        \"credential_value\": encrypted_value_str,\n    }\n\n    created_credential_id = None\n\n    try:\n        # POST to add or update credential\n        url = f\"{BASE_URL}/api/credentials\"\n        resp = requests.post(url, headers=headers, json=payload, timeout=TIMEOUT)\n\n        # The API returns 200 with success or validation error message\n        assert resp.status_code == 200, f\"Unexpected status code: {resp.status_code}\"\n\n        resp_json = resp.json()\n        # Expecting a success message or validation error message in response JSON\n        # We check for keys or messages indicating success or validation error\n        # Example success: {\"message\": \"Credential added successfully\"}\n        # Example error: {\"error\": \"Validation failed: ...\"}\n        assert (\n            \"message\" in resp_json or \"error\" in resp_json\n        ), \"Response JSON missing expected keys\"\n\n        if \"error\" in resp_json:\n            # Validation error case: ensure error message is non-empty string\n            assert isinstance(resp_json[\"error\"], str) and resp_json[\"error\"], \"Empty error message\"\n        else:\n            # Success case: message should be non-empty string\n            assert isinstance(resp_json[\"message\"], str) and resp_json[\"message\"], \"Empty success message\"\n\n            # To clean up, retrieve credentials to find the created credential ID\n            get_resp = requests.get(f\"{BASE_URL}/api/credentials\", headers=headers, timeout=TIMEOUT)\n            assert get_resp.status_code == 200, \"Failed to get credentials after creation\"\n            credentials = get_resp.json()\n            # Find credential by name\n            for cred in credentials:\n                if cred.get(\"credential_name\") == credential_name:\n                    created_credential_id = cred.get(\"id\")\n                    break\n            assert created_credential_id, \"Created credential ID not found in credentials list\"\n\n    finally:\n        # Cleanup: delete the created credential if it exists\n        if created_credential_id:\n            try:\n                delete_credential(created_credential_id, headers)\n            except Exception as e:\n                print(f\"Cleanup failed: could not delete credential {created_credential_id}: {e}\")\n\n\ntest_post_credentials_adds_or_updates_with_validation()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 4, in <module>\nModuleNotFoundError: No module named 'cryptography'\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.373Z",
    "modified": "2025-07-24T20:30:37.254Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "a066fffb-f905-47f7-bce0-10dd383c1526",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC004-delete credential by id removes credential",
    "description": "Test the /api/credentials/{credentialId} DELETE endpoint to confirm it deletes the specified credential by ID and returns a 204 status code.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Replace these with valid credentials for authentication\nUSERNAME = \"testuser\"\nPASSWORD = \"testpassword\"\n\ndef authenticate():\n    url = f\"{BASE_URL}/api/users/login\"\n    payload = {\"username\": USERNAME, \"password\": PASSWORD}\n    response = requests.post(url, json=payload, timeout=TIMEOUT)\n    response.raise_for_status()\n    token = response.json().get(\"token\")\n    assert token, \"Authentication failed, no token received\"\n    return token\n\ndef create_credential(headers):\n    url = f\"{BASE_URL}/api/credentials\"\n    # Use a unique credential name to avoid conflicts\n    credential_name = f\"test_credential_{uuid.uuid4()}\"\n    # For testing, credential_value can be a dummy encrypted string\n    credential_value = \"encrypted_dummy_value\"\n    payload = {\n        \"credential_name\": credential_name,\n        \"credential_value\": credential_value\n    }\n    response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    response.raise_for_status()\n    # After creation, get the list of credentials to find the new credential's ID\n    get_resp = requests.get(url, headers=headers, timeout=TIMEOUT)\n    get_resp.raise_for_status()\n    credentials = get_resp.json()\n    # Find credential by name\n    for cred in credentials:\n        if cred.get(\"credential_name\") == credential_name:\n            return cred.get(\"id\")\n    raise Exception(\"Created credential ID not found\")\n\ndef delete_credential_by_id_test():\n    token = authenticate()\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    credential_id = None\n    try:\n        # Create a credential to delete\n        credential_id = create_credential(headers)\n        assert credential_id, \"Failed to create credential for deletion test\"\n\n        # Delete the credential by ID\n        delete_url = f\"{BASE_URL}/api/credentials/{credential_id}\"\n        delete_resp = requests.delete(delete_url, headers=headers, timeout=TIMEOUT)\n\n        # Validate response status code 204 No Content\n        assert delete_resp.status_code == 204, f\"Expected status code 204, got {delete_resp.status_code}\"\n\n        # Verify credential is actually deleted by attempting to get credentials and checking absence\n        get_resp = requests.get(f\"{BASE_URL}/api/credentials\", headers=headers, timeout=TIMEOUT)\n        get_resp.raise_for_status()\n        credentials = get_resp.json()\n        ids = [cred.get(\"id\") for cred in credentials]\n        assert credential_id not in ids, \"Credential was not deleted successfully\"\n\n    finally:\n        # Cleanup: If credential still exists, attempt to delete it\n        if credential_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/credentials/{credential_id}\", headers=headers, timeout=TIMEOUT)\n            except Exception:\n                pass\n\ndelete_credential_by_id_test()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 74, in <module>\n  File \"<string>\", line 43, in delete_credential_by_id_test\n  File \"<string>\", line 15, in authenticate\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/users/login\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.378Z",
    "modified": "2025-07-24T20:30:42.814Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "348bd3bd-c29f-4680-b2aa-9a11f38dc02d",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC005-get tools returns tool configurations",
    "description": "Test the /api/tools GET endpoint to verify it returns a list of available tools with their configurations such as tavily_search, multiply, send_email, and post_to_slack.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Assuming JWT authentication is required, provide a valid token here\n# For this test, we assume a token is available; replace 'your_jwt_token' with a valid token.\nJWT_TOKEN = \"your_jwt_token\"\n\ndef test_get_tools_returns_tool_configurations():\n    url = f\"{BASE_URL}/api/tools\"\n    headers = {\n        \"Authorization\": f\"Bearer {JWT_TOKEN}\",\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        tools = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(tools, list), \"Response JSON is not a list\"\n\n    # Check that at least one tool has the expected keys\n    expected_tool_keys = {\"tavily_search\", \"multiply\", \"send_email\", \"post_to_slack\"}\n    found_keys = set()\n    for tool in tools:\n        if not isinstance(tool, dict):\n            continue\n        found_keys.update(tool.keys())\n\n    missing_keys = expected_tool_keys - found_keys\n    assert not missing_keys, f\"Missing expected tool configurations: {missing_keys}\"\n\ntest_get_tools_returns_tool_configurations()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 18, in test_get_tools_returns_tool_configurations\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/tools\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 42, in <module>\n  File \"<string>\", line 20, in test_get_tools_returns_tool_configurations\nAssertionError: Request to http://localhost:8000/api/tools failed: 404 Client Error: Not Found for url: http://localhost:8000/api/tools\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.383Z",
    "modified": "2025-07-24T20:30:38.654Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "b61ce557-6904-4612-81e1-fe3a73f4c352",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC006-post workflows submits new or updated workflow",
    "description": "Test the /api/workflows POST endpoint to ensure it accepts new or updated workflow JSON configurations and returns appropriate success or error messages.",
    "code": "import requests\nimport json\n\nBASE_URL = \"http://localhost:8000\"\nWORKFLOWS_ENDPOINT = f\"{BASE_URL}/api/workflows\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/api/users/login\"\nLOGOUT_ENDPOINT = f\"{BASE_URL}/api/users/logout\"\n\nUSERNAME = \"testuser\"\nPASSWORD = \"testpassword\"\n\ndef test_post_workflows_submits_new_or_updated_workflow():\n    # Login to get JWT token\n    login_payload = {\"username\": USERNAME, \"password\": PASSWORD}\n    login_resp = requests.post(LOGIN_ENDPOINT, json=login_payload, timeout=30)\n    assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n    token = login_resp.json().get(\"token\")\n    assert token, \"JWT token not found in login response\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Define a sample valid workflow JSON configuration\n    workflow_json = {\n        \"nodes\": [\n            {\n                \"id\": \"node1\",\n                \"type\": \"trigger\",\n                \"name\": \"Start Trigger\",\n                \"parameters\": {}\n            },\n            {\n                \"id\": \"node2\",\n                \"type\": \"llm\",\n                \"name\": \"OpenAI LLM Node\",\n                \"parameters\": {\n                    \"model\": \"gpt-4\",\n                    \"prompt\": \"Hello, world!\"\n                }\n            }\n        ],\n        \"connections\": [\n            {\"from\": \"node1\", \"to\": \"node2\"}\n        ],\n        \"metadata\": {\n            \"name\": \"Test Workflow\",\n            \"description\": \"A workflow for testing POST /api/workflows\"\n        }\n    }\n\n    try:\n        # POST the workflow JSON to /api/workflows\n        resp = requests.post(\n            WORKFLOWS_ENDPOINT,\n            headers=headers,\n            json={\"workflow_json\": workflow_json},\n            timeout=30\n        )\n        assert resp.status_code == 200, f\"Unexpected status code: {resp.status_code}, response: {resp.text}\"\n        resp_json = resp.json()\n        # Expecting a success or error message in response JSON\n        assert \"message\" in resp_json or \"error\" in resp_json, \"Response JSON missing 'message' or 'error' key\"\n\n        # If error key present, fail the test\n        if \"error\" in resp_json:\n            assert False, f\"API returned error: {resp_json['error']}\"\n\n        # If message key present, check it indicates success\n        if \"message\" in resp_json:\n            assert isinstance(resp_json[\"message\"], str) and len(resp_json[\"message\"]) > 0, \"Empty success message\"\n\n    finally:\n        # Logout to invalidate token\n        requests.post(LOGOUT_ENDPOINT, headers=headers, timeout=30)\n\ntest_post_workflows_submits_new_or_updated_workflow()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 78, in <module>\n  File \"<string>\", line 16, in test_post_workflows_submits_new_or_updated_workflow\nAssertionError: Login failed: {\"detail\":\"Not Found\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.389Z",
    "modified": "2025-07-24T20:30:38.665Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "c1294311-f176-4294-863d-3af694a31e8b",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC007-post users login returns jwt token",
    "description": "Test the /api/users/login POST endpoint to verify user authentication with username and password, returning a JWT token on successful login.",
    "code": "import requests\n\ndef test_post_users_login_returns_jwt_token():\n    base_url = \"http://localhost:8000\"\n    login_url = f\"{base_url}/api/users/login\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Use example credentials; adjust if needed for your test environment\n    payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    try:\n        response = requests.post(login_url, json=payload, headers=headers, timeout=30)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        json_response = response.json()\n        assert isinstance(json_response, dict), \"Response is not a JSON object\"\n        assert \"token\" in json_response or \"access_token\" in json_response, \"JWT token not found in response\"\n        token = json_response.get(\"token\") or json_response.get(\"access_token\")\n        assert isinstance(token, str) and len(token) > 0, \"JWT token is empty or not a string\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_post_users_login_returns_jwt_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 16, in test_post_users_login_returns_jwt_token\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.394Z",
    "modified": "2025-07-24T20:30:41.101Z"
  },
  {
    "projectId": "efa8a272-9589-41c0-a07a-df1b9ebb6338",
    "testId": "c67f0b10-2537-48a9-beab-0927a64de287",
    "userId": "74b8a458-1071-70a8-0b94-641ce0bb080b",
    "title": "TC008-post users logout invalidates jwt token",
    "description": "Test the /api/users/logout POST endpoint to confirm it invalidates the JWT token and returns a success message on logout.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nLOGIN_ENDPOINT = \"/api/users/login\"\nLOGOUT_ENDPOINT = \"/api/users/logout\"\nTIMEOUT = 30\n\ndef test_post_users_logout_invalidates_jwt_token():\n    login_url = BASE_URL + LOGIN_ENDPOINT\n    logout_url = BASE_URL + LOGOUT_ENDPOINT\n\n    # Use test credentials - replace with valid test user credentials\n    credentials = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n\n    # Step 1: Login to get JWT token\n    try:\n        login_response = requests.post(login_url, json=credentials, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Login failed with status {login_response.status_code}\"\n        login_data = login_response.json()\n        assert \"token\" in login_data, \"JWT token not found in login response\"\n        token = login_data[\"token\"]\n    except Exception as e:\n        raise AssertionError(f\"Login request failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    # Step 2: Logout to invalidate the JWT token\n    try:\n        logout_response = requests.post(logout_url, headers=headers, timeout=TIMEOUT)\n        assert logout_response.status_code == 200, f\"Logout failed with status {logout_response.status_code}\"\n        logout_data = logout_response.json()\n        # Assuming success message is in a key like 'message' or similar\n        assert any(\n            key in logout_data and isinstance(logout_data[key], str) and \"success\" in logout_data[key].lower()\n            for key in logout_data\n        ), \"Logout success message not found or invalid\"\n    except Exception as e:\n        raise AssertionError(f\"Logout request failed: {e}\")\n\n    # Step 3: Verify token is invalidated by attempting an authenticated request with the same token\n    # We'll try to call /api/credentials GET endpoint which requires auth\n    credentials_url = BASE_URL + \"/api/credentials\"\n    try:\n        auth_check_response = requests.get(credentials_url, headers=headers, timeout=TIMEOUT)\n        # Expecting unauthorized or forbidden status since token should be invalidated\n        assert auth_check_response.status_code in (401, 403), (\n            f\"Token was not invalidated after logout, status code: {auth_check_response.status_code}\"\n        )\n    except Exception as e:\n        raise AssertionError(f\"Auth check request failed: {e}\")\n\ntest_post_users_logout_invalidates_jwt_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 21, in test_post_users_logout_invalidates_jwt_token\nAssertionError: Login failed with status 404\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 26, in test_post_users_logout_invalidates_jwt_token\nAssertionError: Login request failed: Login failed with status 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T20:30:07.399Z",
    "modified": "2025-07-24T20:30:42.233Z"
  }
]
